generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Workspace {
  id        String             @id @default(cuid())
  user      String
  name      String
  image     String?
  members   Members[]
  invites   WorkspaceInvites[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  projects  Project[]
}

model Members {
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
  userId      String
  role        String    @default("member")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@id(name: "memberId", [workspaceId, userId])
}

model WorkspaceInvites {
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
  userId      String
  code        String    @unique
  createdAt   DateTime  @default(now())
  expiresAt   DateTime  @default(dbgenerated("now() + interval '7 days'"))
  updatedAt   DateTime  @updatedAt

  @@id(name: "inviteId", [workspaceId, userId])
}

model Project {
  id          String    @id @default(cuid())
  name        String
  image       String?
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Task {
  id          String     @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  assigneeId  String?
  projectId   String
  workspaceId String
  dueDate     DateTime?
  status      TaskStatus
  position    Int
}

enum TaskStatus {
  BACKLOG
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
}
