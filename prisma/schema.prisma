generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
  binaryTargets   = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  //directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  members       Member[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Workspace {
  id        String             @id @default(cuid())
  user      String
  name      String
  image     String?
  members   Member[]
  invites   WorkspaceInvites[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  projects  Project[]
}

model Member {
  id            String    @id @default(cuid())
  workspace     Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId   String
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  role          String    @default("member")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  assignedTasks Task[]    @relation(name: "TaskAssignee")
  createdTasks  Task[]    @relation(name: "TaskCreator")
  Worklog       Worklog[]

  @@unique([workspaceId, userId])
}

model WorkspaceInvites {
  id           String    @id @default(cuid())
  workspace    Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId  String
  inviteeEmail String
  code         String    @unique
  createdAt    DateTime  @default(now())
  expiresAt    DateTime  @default(dbgenerated("now() + interval '7 days'"))
  updatedAt    DateTime  @updatedAt

  @@unique([workspaceId, inviteeEmail])
}

model Project {
  id          String    @id @default(cuid())
  name        String
  image       String?
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Task        Task[]
}

model TaskCategory {
  id    String @id @default(cuid())
  name  String
  
  // One category can have many tasks
  tasks Task[]
  
  @@map("task_categories")
}

model Task {
  id           String        @id @default(cuid())
  name         String
  description  String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  assignee     Member?       @relation(name: "TaskAssignee", fields: [assigneeId], references: [id])
  assigneeId   String?
  project      Project       @relation(fields: [projectId], references: [id])
  projectId    String
  workspaceId  String
  dueDate      DateTime
  status       TaskStatus    @default(TODO)
  position     Int
  timeEstimate Int? //store all values in minutes
  createdBy    Member        @relation(name: "TaskCreator", fields: [createdById], references: [id])
  createdById  String
  worklogs     Worklog[]
  //tasks can be linked
  parent       Task?         @relation(name: "TaskHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  parentId     String?
  children     Task[]        @relation(name: "TaskHierarchy")
  assets       TaskAsset[]
  // Many tasks can belong to one category
  categoryId   String?
  category     TaskCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  @@index([parentId]) // Index for faster lookups
}

model TaskAsset {
  id        String   @id @default(cuid())
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id])
  assetType String?
  assetUrl  String
  fileName  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Worklog {
  id              String   @id @default(cuid())
  taskId          String
  task            Task     @relation(fields: [taskId], references: [id])
  memberId        String
  member          Member   @relation(fields: [memberId], references: [id])
  timeSpent       Int
  workDescription String?
  dateWorked      DateTime //when the work was done
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

enum TaskStatus {
  BACKLOG
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
}
