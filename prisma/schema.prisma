generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
  binaryTargets   = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Member {
  id                            String    @id
  workspaceId                   String
  userId                        String
  role                          String    @default("member")
  createdAt                     DateTime  @default(now())
  updatedAt                     DateTime
  users                         users     @relation(fields: [userId], references: [id])
  Workspace                     Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  Task_Task_assigneeIdToMember  Task[]    @relation("Task_assigneeIdToMember")
  Task_Task_createdByIdToMember Task[]    @relation("Task_createdByIdToMember")
  Worklog                       Worklog[]

  @@unique([workspaceId, userId])
}

model Project {
  id                     String    @id
  name                   String
  image                  String?
  workspaceId            String
  createdAt              DateTime  @default(now())
  updatedAt              DateTime
  autoHideCompletedTasks Boolean   @default(false)
  taskAssignmentEmail    Boolean   @default(true)
  Workspace              Workspace @relation(fields: [workspaceId], references: [id])
  Task                   Task[]
}

model Task {
  id                              String           @id
  name                            String
  description                     String?
  createdAt                       DateTime         @default(now())
  updatedAt                       DateTime
  assigneeId                      String?
  projectId                       String
  workspaceId                     String
  dueDate                         DateTime?
  status                          TaskStatus       @default(TODO)
  position                        Int
  timeEstimate                    Int?
  createdById                     String
  parentId                        String?
  categoryId                      String?
  Member_Task_assigneeIdToMember  Member?          @relation("Task_assigneeIdToMember", fields: [assigneeId], references: [id])
  task_categories                 task_categories? @relation(fields: [categoryId], references: [id])
  Member_Task_createdByIdToMember Member           @relation("Task_createdByIdToMember", fields: [createdById], references: [id])
  Task                            Task?            @relation("TaskToTask", fields: [parentId], references: [id], onDelete: Cascade)
  other_Task                      Task[]           @relation("TaskToTask")
  Project                         Project          @relation(fields: [projectId], references: [id])
  TaskAsset                       TaskAsset[]
  Worklog                         Worklog[]

  @@index([parentId])
}

model TaskAsset {
  id        String   @id
  taskId    String
  assetType String?
  assetUrl  String
  fileName  String
  createdAt DateTime @default(now())
  updatedAt DateTime
  Task      Task     @relation(fields: [taskId], references: [id])
}

model Worklog {
  id              String   @id
  taskId          String
  memberId        String
  timeSpent       Int
  workDescription String?
  dateWorked      DateTime
  createdAt       DateTime @default(now())
  updatedAt       DateTime
  Member          Member   @relation(fields: [memberId], references: [id])
  Task            Task     @relation(fields: [taskId], references: [id])
}

model Workspace {
  id               String             @id
  user             String
  name             String
  image            String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  Member           Member[]
  Project          Project[]
  WorkspaceInvites WorkspaceInvites[]
}

model WorkspaceInvites {
  id           String    @id
  workspaceId  String
  inviteeEmail String
  code         String    @unique
  createdAt    DateTime  @default(now())
  expiresAt    DateTime  @default(dbgenerated("(now() + '7 days'::interval)"))
  updatedAt    DateTime
  Workspace    Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, inviteeEmail])
}

model accounts {
  id                  String  @id
  user_id             String
  type                String
  provider            String
  provider_account_id String
  refresh_token       String?
  access_token        String?
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?
  users               users   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_account_id])
}

model sessions {
  id            String   @id
  session_token String   @unique
  user_id       String
  expires       DateTime
  users         users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model task_categories {
  id    String  @id
  name  String
  icon  String?
  color String?
  Task  Task[]
}

model users {
  id             String     @id
  name           String?
  email          String     @unique
  password       String?
  email_verified DateTime?
  image          String?
  Member         Member[]
  accounts       accounts[]
  sessions       sessions[]
}

model verification_tokens {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

enum TaskStatus {
  BACKLOG
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
}
