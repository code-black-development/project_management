generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
  binaryTargets   = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String    @unique
  password         String?
  emailVerified    DateTime? @map("email_verified")
  image            String?
  resetToken       String?   @unique
  resetTokenExpiry DateTime?
  members          Member[]
  accounts         Account[]
  sessions         Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Workspace {
  id        String             @id @default(cuid())
  user      String
  name      String
  image     String?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  members   Member[]
  projects  Project[]
  invites   WorkspaceInvites[]
}

model Member {
  id            String    @id @default(cuid())
  workspaceId   String
  userId        String
  role          String    @default("member")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id])
  workspace     Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  assignedTasks Task[]    @relation("TaskAssignee")
  createdTasks  Task[]    @relation("TaskCreator")
  Worklog       Worklog[]

  @@unique([workspaceId, userId])
}

model WorkspaceInvites {
  id           String    @id @default(cuid())
  workspaceId  String
  inviteeEmail String
  code         String    @unique
  createdAt    DateTime  @default(now())
  expiresAt    DateTime  @default(dbgenerated("(now() + '7 days'::interval)"))
  updatedAt    DateTime  @updatedAt
  workspace    Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, inviteeEmail])
}

model Project {
  id                     String    @id @default(cuid())
  name                   String
  image                  String?
  workspaceId            String
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  autoHideCompletedTasks Boolean   @default(false)
  taskAssignmentEmail    Boolean   @default(true)
  workspace              Workspace @relation(fields: [workspaceId], references: [id])
  Task                   Task[]
}

model TaskCategory {
  id    String  @id @default(cuid())
  name  String
  icon  String?
  color String?
  tasks Task[]

  @@map("task_categories")
}

model Task {
  id           String        @id @default(cuid())
  name         String
  description  String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  assigneeId   String?
  projectId    String
  workspaceId  String
  dueDate      DateTime?
  status       TaskStatus    @default(TODO)
  position     Int
  timeEstimate Int?
  createdById  String
  parentId     String?
  categoryId   String?
  assignee     Member?       @relation("TaskAssignee", fields: [assigneeId], references: [id])
  category     TaskCategory? @relation(fields: [categoryId], references: [id])
  createdBy    Member        @relation("TaskCreator", fields: [createdById], references: [id])
  parent       Task?         @relation("TaskHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children     Task[]        @relation("TaskHierarchy")
  project      Project       @relation(fields: [projectId], references: [id])
  assets       TaskAsset[]
  worklogs     Worklog[]

  @@index([parentId])
}

model TaskAsset {
  id        String   @id @default(cuid())
  taskId    String
  assetType String?
  assetUrl  String
  fileName  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  task      Task     @relation(fields: [taskId], references: [id])
}

model Worklog {
  id              String   @id @default(cuid())
  taskId          String
  memberId        String
  timeSpent       Int
  workDescription String?
  dateWorked      DateTime
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  member          Member   @relation(fields: [memberId], references: [id])
  task            Task     @relation(fields: [taskId], references: [id])
}

enum TaskStatus {
  BACKLOG
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
}
